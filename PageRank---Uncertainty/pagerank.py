import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    probabilities = {}
    page_links = corpus[page]
    available_links = []

    if len(page_links) != 0:
        for pages in corpus:
            probabilities[pages] = (1 - damping_factor)/len(corpus)
            #divide 1 - damping_factor entre todos os elementos de corpus
        
        for link in corpus[page]: #for in links linked to a page
            probabilities[link] += damping_factor / len(page_links)
    
    else:
        for relation in corpus:
            probabilities[relation] = 1 / len(corpus)
    
    return probabilities
   
    



def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    #giving a pagerank equal to 0 to all the pages in probabilities
    probabilities = {}
    for page in corpus:
        probabilities[page] = 0
    
    #selecting random page and given value 1/n (bc it was visited)
    first_page = random.choice(list(corpus.keys()))
    probabilities[first_page] = 1/n

    current_probabilities = transition_model(corpus, first_page, damping_factor)

    for i in range(1,n):
        new_page = random.choices(list(current_probabilities.keys()), list(current_probabilities.values()), k=1)
        #choosing ine item (k=1), from the current_probabilities keys list, but using the values of that as probabilities, so higher values higher chances of being chosen
        probabilities[new_page[0]] = probabilities[new_page[0]] + 1/n
        current_probabilities = transition_model(corpus, new_page[0],damping_factor)
        #new_page[0] -> item 0 from the list generated by random.choices

    return probabilities

def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    pageRank = {}
    N = len(corpus)
    threshold = 0.0005
    count = 0

    for pages in corpus.keys():
        pageRank[pages] = 1/N
        #every page has a value equal to 1/N

    while count < N:
        for key in corpus:
            new = (1 - damping_factor)/N
            # the 1 - d probability of choosing a page at random is split evenly among all N possible pages
            sigma = 0
            for page in corpus:
                if key in corpus[page]: #if key is in the links of a certain page
                    num_links = len(corpus[page])
                    sigma = sigma + pageRank[page] / num_links
                    #we divide PR(i) by the number of links NumLinks(i) to get the probability that we were on page i and chose the link to page p.
            sigma = damping_factor * sigma
            new += sigma
            if abs(pageRank[key] - new) < threshold:
                count += 1
            pageRank[key] = new #new value (new + sigma)
    
    return pageRank

if __name__ == "__main__":
    main()
